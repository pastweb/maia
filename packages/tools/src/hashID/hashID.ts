/**
 * The default alphabet is 62 numbers and lower and uppe case letters and numbers.
 * Any numbers that look like letters and vice versa are removed:
 * 1 l, 0 o.
 * Also the following letters are not present, to prevent any
 * expletives: cfhistu
 */
const ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

const ALPHABET_LENGTH = ALPHABET.length;

// Governs the length of the ID.
// With an alphabet of 62 chars,
// a length of 8 gives us 62^8 or
// 218,340,105,584,896 possibilities.
// Should be enough...
const ID_LENGTH = 8;

/**
 * Governs the number of times we should try to find
 * a unique value before giving up.
 * @type {Number}
 */
const UNIQUE_RETRIES = 9999;

/**
 * Returns a randomly-generated friendly ID.
 * Note that the friendly ID is not guaranteed to be
 * unique to any other ID generated by this same method,
 * so it is up to you to check for uniqueness.
 * @return {String} friendly ID.
 */
function generate(prefix?: string, idLength?: number): string {
  const lengthId = idLength || ID_LENGTH;
  let key = prefix || '';
  for (let i = 0; i < lengthId; i++) {
    key = `${key}${ALPHABET.charAt(Math.floor(Math.random() * ALPHABET_LENGTH))}`;
  }
  return key;
};

/**
 * Tries to generate a unique ID that is not defined in the
 * `cache` array.
 * @param  {Array} cache The list of previous ids to avoid.
 * @return {String} A unique ID, or `null` if one could not be generated.
 */
function generateUnique(cache: string[], prefix?: string, idLength?: number, retries?: number): string {
  const cacheSet = new Set(cache) || new Set();
  let id = '';
  const uniqueReties = retries || UNIQUE_RETRIES;

  // Try to generate a unique ID,
  // i.e. one that isn't in the cache.

  for (let _retries = 0; _retries < uniqueReties; _retries++) {
    id = generate(prefix, idLength);
    
    if (!cacheSet.has(id)) break;

    if (_retries === uniqueReties) {
      console.error(`tried ${_retries} times to find a unique ID.`);
    }
  }

  return id;
};

export const hashID = {
  generate,
  generateUnique,
};
